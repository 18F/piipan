{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "apiName": {
            "type": "String"
        },
        "resourceTags": {
            "type": "object"
        },
        "location": {
            "type": "String"
        },
        "publisherEmail": {
            "type": "String"
        },
        "publisherName": {
            "type": "String"
        },
        "orchestratorUrl": {
            "type": "String"
        },
        "dupPartPolicyXml": {
            "type": "String"
        },
        "uploadAccounts": {
            "type": "String"
        },
        "uploadBaseDomain": {
            "type": "String"
        },
        "uploadPolicyXml": {
            "type": "String"
        }
    },
    "variables": {
        "systemTypeTag": {
            "SysType": "DupPartApi"
        },
        "matchDisplayName": "Duplicate participation API",
        "matchSetName": "match",
        "uploadDisplayName": "Bulk upload API",
        "uploadSetName": "bulk-upload",
        "uploadAccountsList": "[split(parameters('uploadAccounts'), ' ')]",
        "copy": [{
            "name": "uploadApiNames",
            "count": "[length(variables('uploadAccountsList'))]",
            "input": "[concat(variables('uploadSetName'), '-', variables('uploadAccountsList')[copyIndex('uploadApiNames')])]"
        }]
    },
    "resources": [
        {
            "type": "Microsoft.ApiManagement/service",
            "apiVersion": "2020-06-01-preview",
            "name": "[parameters('apiName')]",
            "location": "[parameters('location')]",
            "tags": "[union(parameters('resourceTags'), variables('systemTypeTag'))]",
            "sku": {
                "name": "Developer",
                "capacity": 1
            },
            "identity": {
                "type": "SystemAssigned"
            },
            "properties": {
                "publisherEmail": "[parameters('publisherEmail')]",
                "publisherName": "[parameters('publisherName')]",
                "hostnameConfigurations": [
                    {
                        "type": "Proxy",
                        "hostName": "[concat(parameters('apiName'), '.azure-api.net')]",
                        "defaultSslBinding": true
                    }
                ],
                /* Explicity asserting security settings rather than relying on defaults. */
                "customProperties": {
                    "Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Ciphers.TripleDes168": "false",
                    "Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Tls11": "false",
                    "Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Tls10": "false",
                    "Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Ssl30": "false",
                    "Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Backend.Protocols.Tls11": "false",
                    "Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Backend.Protocols.Tls10": "false",
                    "Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Backend.Protocols.Ssl30": "false",
                    "Microsoft.WindowsAzure.ApiManagement.Gateway.Protocols.Server.Http2": "false"
                }
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apiVersionSets",
            "apiVersion": "2020-06-01-preview",
            "name": "[concat(parameters('apiName'), '/', variables('matchSetName'))]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service', parameters('apiName'))]"
            ],
            "properties": {
                "displayName": "[variables('matchDisplayName')]",
                "versioningScheme": "Segment"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis",
            "apiVersion": "2020-06-01-preview",
            "name": "[concat(parameters('apiName'), '/', variables('matchSetName'))]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service', parameters('apiName'))]",
                "[resourceId('Microsoft.ApiManagement/service/apiVersionSets', parameters('apiName'), variables('matchSetName'))]"
            ],
            "properties": {
                "displayName": "[variables('matchDisplayName')]",
                "subscriptionRequired": true,
                "protocols": [
                    "https"
                ],
                "path": "",
                "apiVersion": "v1",
                "apiVersionSetId": "[resourceId('Microsoft.ApiManagement/service/apiVersionSets', parameters('apiName'), variables('matchSetName'))]",
                "serviceUrl": "[parameters('orchestratorUrl')]"
            }
        },
        /* XXX generate via OpenAPI spec rather than hardcode */
        {
            "type": "Microsoft.ApiManagement/service/apis/operations",
            "apiVersion": "2020-06-01-preview",
            "name": "[concat(parameters('apiName'), '/', variables('matchSetName'), '/post-query')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service', parameters('apiName'))]",
                "[resourceId('Microsoft.ApiManagement/service/apis', parameters('apiName'), variables('matchSetName'))]"
            ],
            "properties": {
                "displayName": "Search for all matching PII records",
                "method": "POST",
                "urlTemplate": "/query",
                "description": "Queries all state databases for any PII records that are an exact match to the full name, date of birth, and social security number in the request body's `query` property.",
                "responses": [
                    {
                        "statusCode": 200,
                        "description": "Matching PII records, if any exist"
                    },
                    {
                        "statusCode": 400,
                        "description": "Bad request. Missing one of the required properties in the request body."
                    }
                ]
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations/policies",
            "apiVersion": "2020-06-01-preview",
            "name": "[concat(parameters('apiName'), '/', variables('matchSetName'), '/post-query/policy')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis/operations', parameters('apiName'), variables('matchSetName'), 'post-query')]",
                "[resourceId('Microsoft.ApiManagement/service/apis', parameters('apiName'), variables('matchSetName'))]",
                "[resourceId('Microsoft.ApiManagement/service', parameters('apiName'))]"
            ],
            "properties": {
                "value": "[parameters('dupPartPolicyXml')]",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations",
            "apiVersion": "2020-06-01-preview",
            "name": "[concat(parameters('apiName'), '/', variables('matchSetName'), '/get-lookup')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service', parameters('apiName'))]",
                "[resourceId('Microsoft.ApiManagement/service/apis', parameters('apiName'), variables('matchSetName'))]"
            ],
            "properties": {
                "displayName": "Retrieve original match data",
                "method": "GET",
                "urlTemplate": "/lookup_ids/{lookupId}",
                "description": "Get the original match data related to a lookup ID. User can provide a lookup ID and receive the match data associated with it.",
                "templateParameters": [
                    {
                        "name": "lookupId",
                        "description": "User-provided lookup ID",
                        "type": "string",
                        "required": true
                    }
                ],
                "responses": [
                    {
                        "statusCode": 200,
                        "description": "Original active match data"
                    },
                    {
                        "statusCode": 400,
                        "description": "bad request"
                    },
                    {
                        "statusCode": 404,
                        "description": "not found"
                    }
                ]
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations/policies",
            "apiVersion": "2020-06-01-preview",
            "name": "[concat(parameters('apiName'), '/', variables('matchSetName'), '/get-lookup/policy')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis/operations', parameters('apiName'), variables('matchSetName'), 'get-lookup')]",
                "[resourceId('Microsoft.ApiManagement/service/apis', parameters('apiName'), variables('matchSetName'))]",
                "[resourceId('Microsoft.ApiManagement/service', parameters('apiName'))]"
            ],
            "properties": {
                "value": "[parameters('dupPartPolicyXml')]",
                "format": "xml"
            }
        },

        /* Bulk upload API(s) */
        {
            "type": "Microsoft.ApiManagement/service/apiVersionSets",
            "apiVersion": "2020-06-01-preview",
            "name": "[concat(parameters('apiName'), '/', variables('uploadApiNames')[copyIndex()])]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service', parameters('apiName'))]"
            ],
            "properties": {
                "displayName": "[concat(variables('uploadAccountsList')[copyIndex()], ' ', variables('uploadDisplayName'))]",
                "versioningScheme": "Segment"
            },
            "copy": {
                "name": "per-state-upload-api-vs",
                "count": "[length(variables('uploadAccountsList'))]"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis",
            "apiVersion": "2020-06-01-preview",
            "name": "[concat(parameters('apiName'), '/', variables('uploadApiNames')[copyIndex()])]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service', parameters('apiName'))]",
                "[resourceId('Microsoft.ApiManagement/service/apiVersionSets', parameters('apiName'), variables('uploadApiNames')[copyIndex()])]"
            ],
            "properties": {
                "displayName": "[concat(variables('uploadAccountsList')[copyIndex()], ' ', variables('uploadDisplayName'))]",
                "subscriptionRequired": true,
                "protocols": [
                    "https"
                ],
                "path": "[variables('uploadAccountsList')[copyIndex()]]",
                "apiVersion": "v1",
                "apiVersionSetId": "[resourceId('Microsoft.ApiManagement/service/apiVersionSets', parameters('apiName'), variables('uploadApiNames')[copyIndex()])]",
                "serviceUrl": "[concat('https://', variables('uploadAccountsList')[copyIndex()], parameters('uploadBaseDomain'))]"
            },
            "copy": {
                "name": "per-state-upload-apis",
                "count": "[length(variables('uploadAccountsList'))]"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/policies",
            "apiVersion": "2020-06-01-preview",
            "name": "[concat(parameters('apiName'), '/', variables('uploadApiNames')[copyIndex()], '/policy')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service', parameters('apiName'))]",
                "[resourceId('Microsoft.ApiManagement/service/apis', parameters('apiName'), variables('uploadApiNames')[copyIndex()])]"
            ],
            "properties": {
                "value": "[parameters('uploadPolicyXml')]",
                "format": "xml"
            },
            "copy": {
                "name": "per-state-upload-policies",
                "count": "[length(variables('uploadAccountsList'))]"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations",
            "apiVersion": "2020-06-01-preview",
            "name": "[concat(parameters('apiName'), '/', variables('uploadApiNames')[copyIndex()], '/put-upload')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service', parameters('apiName'))]",
                "[resourceId('Microsoft.ApiManagement/service/apis', parameters('apiName'), variables('uploadApiNames')[copyIndex()])]"
            ],
            "properties": {
                "displayName": "Upload bulk PII data",
                "method": "PUT",
                "urlTemplate": "/upload/{filename}",
                "description": "Upload a CSV file of bulk PII data",
                "templateParameters": [
                    {
                        "name": "filename",
                        "description": "User-provided CSV filename",
                        "type": "string",
                        "required": true
                    }
                ],
                "responses": []
            },
            "copy": {
                "name": "per-state-upload-ops",
                "count": "[length(variables('uploadAccountsList'))]"
            }
        }
    ],
    "outputs": {
        "identity": {
            "type": "object",
            "value": "[reference(parameters('apiName'), '2020-06-01-preview', 'Full').identity]"
        }
    }
}
